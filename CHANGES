2017-01-10 Jerry Lundström

    Release 1.2.2

    Fix for reading pcap files, got stuck because `pcap_loop()` returned
    zero and forgot to check for that.  Added test for reading a pcap and
    checking against a gold output file.

    1842682 Got stuck reading pcap files, add test
    deb6d28 Use ACLOCAL_AMFLAGS in hexdump
    e9f0d48 Add documentation ACLOCAL_AMFLAGS

2016-12-22 Jerry Lundström

    Release 1.2.1

    03018bc More tweaks to thread handling, locking, stopping and errors.

    A situation could occur, because `pcap_thread_stop()` was canceling
    and joining threads, that if called from a PCAP thread would result
    in a deadlock.

    - `pcap_thread_stop()` can now be safely called from any thread
    - PCAP threads are not handled within `pcap_thread_run()`
    - Store related system call in `errbuf` for all `PCAP_THREAD_ERRNO`
      errors, retrieve system call with `pcap_thread_errbuf()`
    - Detach PCAP threads for easier clean up
    - Use `pthread_cleanup_push()` to unlock mutex on cancellation
    - Use `pcap_breakloop()` and `pthread_cancel()` to correctly
      cancel processing

2016-10-26 Jerry Lundström

    Release 1.2.0

    Implement callback queue mode which can be used to wait for space in
    the queue when it is full to not drop packets. A new queue mode
    PCAP_THREAD_QUEUE_MODE_DROP is the default for callback queues and
    will just drop packets if the queue is full, this was the old behavior.

    If all of the pcaps are offline and the callback queue mode is to drop
    packets then it will be changed to use pthread conditions, otherwise
    there is a risk that packets will be dropped if reading packets is
    faster then processing them.

    Other changes:
    - Fix a deadlock issue that could happen when having multiple pcaps
      and using threads with cond mode
    - Fix handling of offline pcaps, they can not be put into nonblocking
      mode
    - Fix uninitialization warnings

    New option in `hexdump`:
    - `-C <mode>`: callback queue mode: cond, drop, wait or yield

    Commits:

    c7eabec Fix CID 1371137
    87cadfc Deadlock fix, handling of offline pcaps and callback queue mode

2016-10-15 Jerry Lundström

    Release 1.1.2

    0b4f6dd Need to stop threads before exiting `pcap_thread_run()`

2016-08-26 Jerry Lundström

    Release 1.1.1

    0a06702 Fix Coverity CID 143102 (#1 of 1): Buffer not null terminated

2016-08-25 Jerry Lundström

    Release 1.1.0

    New features:
    - `pcap_thread_next()`, will step through the pcaps and process
      one packet at a time starting with the first pcap open/add'ed
      and then looping around.
    - `pcap_thread_next_reset()`, resets the internal so that next
      call with `pcap_thread_next()` will start again with the first
      pcap open/add'ed.
    - `pcap_thread_timedrun()`/`pcap_thread_set_timedrun()` can be
      used to do a timed run which means that `pcap_thread_run()` will
      return a short while after the `struct timeval` time has passed.
    - New options to `hexdump`:
      `-A <secs>`          exit after a number of seconds
      `-c <count>`         process count packets then exit

    Bug/tweak fixes:
    - Fix behavior of the none threaded engine part of `pcap_thread_run()`,
      will end only after all pcaps are done.
    - Various error handling

    Commits:

    88715da Add `pcap_thread_next_reset()` to reset the stepping and
            begin all over again
    582c63d Taking the next step
    281ebe4 Timed run and errors
    76d1739 No threads, same behavior
    7186e31 Update README with CPP/CXX flags for C++

2016-08-22 Jerry Lundström

    Release 1.0.1

    b475589 Use -Wall when compiling, fix a few warnings and a oops in
            `pcap_thread_stop()`

2016-08-21 Jerry Lundström

    Release 1.0.0

    First version with basic pthreads support and fallback to `select()`
    on pcaps file descriptors in non-blocking mode.  Three different queue
    modes exists for threaded mode when processing packets; `cond` which
    uses pthread conditions, `wait` which uses `select()` to unconditionally
    wait a while and `yield` which uses `sched_yield()` (if supported) if
    there are no packets to process.

    The example program `hexdump` is included which is a "show and tell"
    of how to use pcap_thread.  The program is a simple `tcpdump` clone
    which will output packets in hexadecimal.

    Commit:

    f5f5237 Add -V for version
    24cb009 Stats and more
    c9b892a Fix #4: add `pcap_thread_strerr()` and better error handling
            in hexdump
    770f675 Check that we have libpcap and headers
    dddea7d Skip timestamp options in help if they are not supported
    81a7c5e Timestamp type/precision not available everywhere
    5e2e9da Add travis
    bf3eec9 Fix #6: Offline support and hexdump
    5109651 Fix set_filter compile warning
    6fee1a9 Keep inside the yellow line, thanks
    740bc37 Correct Makefile.am instructions, add datalink and fix
            read/write buffer.
    6574254 More ignore
    641deed Fix typos
    1388c62 Add version
    24b91c0 Initial commit
